#!/usr/bin/ruby

raise "Please run from root directory" unless Object.const_defined?('ROOT_DIR')


namespace :src do

  SourcePackageTask.new(:linux) do |package|
    package.archive_url = 'http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.28.tar.bz2'
    package.archive_md5 = 'd351e44709c9810b85e29b877f50968a'
    task :patch => ['src:madwifi:extract'] do
      sh "cd #{ROOT_DIR}/src/madwifi/patch-kernel && ./install.sh #{package.build_dir}"
    end
    task :config do
      config_file = "#{package.build_dir}/.config"
      unless File.exists?(config_file)
        sh 'cp', '-f', "#{ROOT_DIR}/src/linux-kernel.config", config_file
        package.make 'oldconfig'
      end
    end
    task :build do
      package.make
      sh 'cp', "#{package.build_dir}/arch/i386/boot/bzImage", "#{BUILD_ROOT}/boot/vmlinux"
      sh 'cp', "#{package.build_dir}/System.map", "#{BUILD_ROOT}/boot/System.map"
      sh 'cp', "#{package.build_dir}/.config", "#{BUILD_ROOT}/boot/config"
      package.make "INSTALL_MOD_PATH=#{BUILD_ROOT}", 'modules_install'
    end
  end

  SourcePackageTask.new(:madwifi) do |package|
    package.archive_url = 'http://ftp.uk.debian.org/debian/pool/non-free/m/madwifi/madwifi_0.9.4+r3772.20080716.orig.tar.gz'
    package.archive_md5 = '34cad66791b44ac29d225320c1ea0bb8'
  end

  SourcePackageTask.new(:busybox) do |package|
    package.archive_url = 'http://busybox.net/downloads/busybox-1.13.1.tar.bz2'
    package.archive_md5 = '17ceb0ba47415d6c22594663fa2bb9fb'
    task :config do
      config_file = "#{package.build_dir}/.config"
      unless File.exists?(config_file)
        sh 'cp', '-f', "#{ROOT_DIR}/src/busybox.config", config_file
        package.make 'oldconfig'
      end
    end
    task :build do
      package.make
      package.make "CONFIG_PREFIX=#{BUILD_ROOT}", 'install'
    end
  end

  SourcePackageTask.new(:liblo) do |package|
    package.archive_url = 'http://downloads.sourceforge.net/liblo/liblo-0.25.tar.gz'
    package.archive_md5 = 'e8b8f6542cdecd6ad5f42dd4d4d81023'
    task :config do
      unless File.exists?("#{package.build_dir}/Makefile")
        sh "cd #{package.build_dir} && ./configure --prefix=/usr"
      end
    end
    task :build do
      package.make
      package.make "DESTDIR=#{BUILD_ROOT}", 'install'
    end
  end

  SourcePackageTask.new(:vlc) do |package|
    package.archive_url = 'http://download.videolan.org/pub/videolan/vlc/0.9.8a/vlc-0.9.8a.tar.bz2'
    package.archive_md5 = '8ffa2ff763badd5de7592004d8d69a63'
    task :patch do
      sh "cd #{package.build_dir} && patch -p1 < ../vlc-0.9.8a+osc.patch"
    end
    task :config do
      unless File.exists?("#{package.build_dir}/Makefile")
        sh "#{ROOT_DIR}/src/vlc-config.sh", package.build_dir
      end
    end
    task :build do
      package.make
      package.make "DESTDIR=#{BUILD_ROOT}", 'install'
    end
  end
  
  

  desc "Clean all source build directories"
  task :clean
  
  desc "Build all packages"
  task :build
  
end
